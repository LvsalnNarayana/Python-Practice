class Person:
    def __init__(self, name, age, place, profession, date_of_birth, hobby):
        self.name = name
        self.age = age
        self.place = place
        self.profession = profession
        self.date_of_birth = date_of_birth
        self.hobby = hobby
        self._index = 0  # For iteration

    def __str__(self):
        return (
            f"User: {self.name}, Age: {self.age}, Place: {self.place}, "
            f"Profession: {self.profession}, Date of Birth: {self.date_of_birth}, "
            f"Hobbies: {', '.join(self.hobby)}"
        )

    def __repr__(self):
        return (
            f"User(name={self.name!r}, age={self.age!r}, place={self.place!r}, "
            f"profession={self.profession!r}, date_of_birth={self.date_of_birth!r}, "
            f"hobby={self.hobby!r})"
        )

    def __len__(self):
        return len(self.hobby)

    def __getitem__(self, position):
        return self.hobby[position]

    def __setitem__(self, position, value):
        self.hobby[position] = value

    def __delitem__(self, position):
        del self.hobby[position]

    def __iter__(self):
        self._index = 0
        return self

    def __next__(self):
        print("hello 1")
        print(self._index)
        if self._index < len(self.hobby):
            result = self.hobby[self._index]
            self._index += 1
            return result
        else:
            raise StopIteration

    def __eq__(self, other):
        return self.age == other.age

    def __lt__(self, other):
        return self.age < other.age

    def __le__(self, other):
        return self.age <= other.age

    def __gt__(self, other):
        return self.age > other.age

    def __ge__(self, other):
        return self.age >= other.age

    def __ne__(self, other):
        return self.age != other.age

    def __call__(self):
        print(
            f"Calling the user {self.name} with age {self.age} and hobbies {', '.join(self.hobby)}"
        )

    def __del__(self):
        print(f"Deleting User: {self.name}")


# Example usage (commented out for demonstration purposes):
user1 = User(
    name="John Doe",
    age=30,
    place="New York",
    profession="Software Engineer",
    date_of_birth="1993-04-01",
    hobby=["Reading", "Hiking", "Coding"],
)
